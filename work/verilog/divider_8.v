/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module divider_8 (
    input [15:0] a,
    input [15:0] b,
    output reg [15:0] quotient,
    output reg [15:0] remainder
  );
  
  
  
  integer i;
  
  reg [255:0] result;
  
  reg [15:0] cmpeq;
  reg [15:0] cmpless;
  reg [15:0] cmpgreat;
  reg [15:0] select;
  
  wire [(5'h10+0)*16-1:0] M_compeq_out;
  reg [(5'h10+0)-1:0] M_compeq_z;
  reg [(5'h10+0)-1:0] M_compeq_v;
  reg [(5'h10+0)-1:0] M_compeq_n;
  reg [(5'h10+0)*2-1:0] M_compeq_alufn;
  
  genvar GEN_compeq0;
  generate
  for (GEN_compeq0=0;GEN_compeq0<5'h10;GEN_compeq0=GEN_compeq0+1) begin: compeq_gen_0
    comp16bit_4 compeq (
      .z(M_compeq_z[GEN_compeq0*(1)+(1)-1-:(1)]),
      .v(M_compeq_v[GEN_compeq0*(1)+(1)-1-:(1)]),
      .n(M_compeq_n[GEN_compeq0*(1)+(1)-1-:(1)]),
      .alufn(M_compeq_alufn[GEN_compeq0*(2'h2)+(2'h2)-1-:(2'h2)]),
      .out(M_compeq_out[GEN_compeq0*(5'h10)+(5'h10)-1-:(5'h10)])
    );
  end
  endgenerate
  
  wire [(5'h10+0)*16-1:0] M_compless_out;
  reg [(5'h10+0)-1:0] M_compless_z;
  reg [(5'h10+0)-1:0] M_compless_v;
  reg [(5'h10+0)-1:0] M_compless_n;
  reg [(5'h10+0)*2-1:0] M_compless_alufn;
  
  genvar GEN_compless0;
  generate
  for (GEN_compless0=0;GEN_compless0<5'h10;GEN_compless0=GEN_compless0+1) begin: compless_gen_0
    comp16bit_4 compless (
      .z(M_compless_z[GEN_compless0*(1)+(1)-1-:(1)]),
      .v(M_compless_v[GEN_compless0*(1)+(1)-1-:(1)]),
      .n(M_compless_n[GEN_compless0*(1)+(1)-1-:(1)]),
      .alufn(M_compless_alufn[GEN_compless0*(2'h2)+(2'h2)-1-:(2'h2)]),
      .out(M_compless_out[GEN_compless0*(5'h10)+(5'h10)-1-:(5'h10)])
    );
  end
  endgenerate
  
  wire [(5'h10+0)*16-1:0] M_compadder_s;
  wire [(5'h10+0)-1:0] M_compadder_z;
  wire [(5'h10+0)-1:0] M_compadder_v;
  wire [(5'h10+0)-1:0] M_compadder_n;
  reg [(5'h10+0)*16-1:0] M_compadder_a;
  reg [(5'h10+0)*16-1:0] M_compadder_b;
  reg [(5'h10+0)-1:0] M_compadder_alufn0;
  
  genvar GEN_compadder0;
  generate
  for (GEN_compadder0=0;GEN_compadder0<5'h10;GEN_compadder0=GEN_compadder0+1) begin: compadder_gen_0
    adder16bit_3 compadder (
      .a(M_compadder_a[GEN_compadder0*(5'h10)+(5'h10)-1-:(5'h10)]),
      .b(M_compadder_b[GEN_compadder0*(5'h10)+(5'h10)-1-:(5'h10)]),
      .alufn0(M_compadder_alufn0[GEN_compadder0*(1)+(1)-1-:(1)]),
      .s(M_compadder_s[GEN_compadder0*(5'h10)+(5'h10)-1-:(5'h10)]),
      .z(M_compadder_z[GEN_compadder0*(1)+(1)-1-:(1)]),
      .v(M_compadder_v[GEN_compadder0*(1)+(1)-1-:(1)]),
      .n(M_compadder_n[GEN_compadder0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(5'h10+0)*16-1:0] M_substractor_s;
  wire [(5'h10+0)-1:0] M_substractor_z;
  wire [(5'h10+0)-1:0] M_substractor_v;
  wire [(5'h10+0)-1:0] M_substractor_n;
  reg [(5'h10+0)*16-1:0] M_substractor_a;
  reg [(5'h10+0)*16-1:0] M_substractor_b;
  reg [(5'h10+0)-1:0] M_substractor_alufn0;
  
  genvar GEN_substractor0;
  generate
  for (GEN_substractor0=0;GEN_substractor0<5'h10;GEN_substractor0=GEN_substractor0+1) begin: substractor_gen_0
    adder16bit_3 substractor (
      .a(M_substractor_a[GEN_substractor0*(5'h10)+(5'h10)-1-:(5'h10)]),
      .b(M_substractor_b[GEN_substractor0*(5'h10)+(5'h10)-1-:(5'h10)]),
      .alufn0(M_substractor_alufn0[GEN_substractor0*(1)+(1)-1-:(1)]),
      .s(M_substractor_s[GEN_substractor0*(5'h10)+(5'h10)-1-:(5'h10)]),
      .z(M_substractor_z[GEN_substractor0*(1)+(1)-1-:(1)]),
      .v(M_substractor_v[GEN_substractor0*(1)+(1)-1-:(1)]),
      .n(M_substractor_n[GEN_substractor0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  always @* begin
    result = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    M_substractor_alufn0 = 16'hffff;
    M_compadder_alufn0 = 16'hffff;
    M_compadder_b = {5'h10{{b}}};
    for (i = 1'h0; i < 5'h10; i = i + 1) begin
      M_compadder_a[(i)*16+0+0-:1] = a[(4'hf - i)*1+0-:1];
      if (i == 1'h0) begin
        M_compadder_a[(i)*16+1+14-:15] = 15'h0000;
      end else begin
        M_compadder_a[(i)*16+1+14-:15] = result[(i - 1'h1)*16+0+14-:15];
      end
      M_compeq_z[(i)*1+0-:1] = M_compadder_z[(i)*1+0-:1];
      M_compeq_v[(i)*1+0-:1] = M_compadder_v[(i)*1+0-:1];
      M_compeq_n[(i)*1+0-:1] = M_compadder_n[(i)*1+0-:1];
      M_compless_z[(i)*1+0-:1] = M_compadder_z[(i)*1+0-:1];
      M_compless_v[(i)*1+0-:1] = M_compadder_v[(i)*1+0-:1];
      M_compless_n[(i)*1+0-:1] = M_compadder_n[(i)*1+0-:1];
      M_compeq_alufn = 32'h55555555;
      M_compless_alufn = 32'haaaaaaaa;
      cmpeq[(i)*1+0-:1] = M_compeq_out[(i)*16+0+0-:1];
      cmpless[(i)*1+0-:1] = M_compless_out[(i)*16+0+0-:1];
      cmpgreat[(i)*1+0-:1] = ~M_compless_out[(i)*16+0+0-:1] & ~M_compeq_out[(i)*16+0+0-:1];
      select[(i)*1+0-:1] = ~(~(cmpgreat[(i)*1+0-:1] | cmpeq[(i)*1+0-:1]) & cmpless[(i)*1+0-:1]);
      
      case (select[(i)*1+0-:1])
        1'h0: begin
          M_substractor_b[(i)*16+15-:16] = 16'h0000;
        end
        1'h1: begin
          M_substractor_b[(i)*16+15-:16] = b;
        end
        default: begin
          M_substractor_b[(i)*16+15-:16] = 16'h0000;
        end
      endcase
      M_substractor_a[(i)*16+0+0-:1] = a[(4'hf - i)*1+0-:1];
      if (i == 1'h0) begin
        M_substractor_a[(i)*16+1+14-:15] = 15'h0000;
      end else begin
        M_substractor_a[(i)*16+1+14-:15] = result[(i - 1'h1)*16+0+14-:15];
      end
      result[(i)*16+15-:16] = M_substractor_s[(i)*16+15-:16];
    end
    for (i = 1'h0; i < 5'h10; i = i + 1) begin
      quotient[(i)*1+0-:1] = select[(4'hf - i)*1+0-:1];
    end
    remainder = result[240+15-:16];
  end
endmodule

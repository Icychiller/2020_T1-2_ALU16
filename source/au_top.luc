module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  sig rst;                  // reset signal
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    .rst(rst){control control;}
    reset_conditioner reset_cond;
  }
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    //**********************//
    // List of Defined I/O: //
    //**********************//
    
    io_led[0] = control.out[7:0];          // 8 LSB of 16-bit Output of ALU to LED
    io_led[1] = control.out[15:8];         // 8 MSB of 16-bit Output of ALU to LED
    
    control.alufn = io_dip[2][6:1];        // 6-bit ALUFN Manual Input Switches
    control.in[7:0] = io_dip[0];           // 8 LSB of 16-bit Manual Input of ALU
    control.in[15:8] = io_dip[1];          // 8 MSB of 16-bit Manual Input of ALU
    
    control.write_b = io_dip[2][0];        // Toggle A/B Write Mode Switch
    control.auto = io_button [0];          // Toggle Manual/Auto Mode Button
    
    io_led[2][7] = control.alufnexception; // ALUFN Exception Output to LED
  }
}